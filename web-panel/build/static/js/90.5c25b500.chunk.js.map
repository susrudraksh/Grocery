{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/app/settings/delivery-settings.js","components/common/CustomBootstrap.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/reactstrap/es/CardBody.js"],"names":["_slicedToArray","arr","i","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","TypeError","App","useState","min_distance","max_distance","delivery_fees","max_normal_delivery_time","max_special_order_delivery_time","inputList","setInputList","min_km_val","max_km_val","SetMaxKmVal","CustomizeFormSchema","Yup","shape","required","onChangeKM","km_val","kmArr","onSubmitCustomizeForm","inputValues","a","handleInputChange","props","handleCustomizationSubmit","state","customizeForms","e","index","target","id","name","list","handleAddClick","useEffect","dataListRender","path","ApiRoutes","GET_DELIVERY_SETTINGS","Http","res","status","data","NotificationManager","error","message","onSubmit","formData","FormData","append","JSON","stringify","ADD_DELIVERY_SETTINGS","success","Row","style","marginTop","xxs","sm","Card","CardBody","className","map","x","validationSchema","handleInventorySubmit","setFieldValue","setFieldTouched","handleChange","values","errors","touched","isSubmitting","FormGroup","Label","data-id","onChange","item","key","type","Button","outline","color","onClick","splice","handleRemoveClick","Colxx","widths","Separator","_toConsumableArray","arr2","iter","Object","prototype","toString","call","from","propTypes","tag","string","cssModule","object","innerRef","oneOfType","func","Tag","attributes","classes","createElement","ref","defaultProps"],"mappings":"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","file":"static/js/90.5c25b500.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Row, Card, CardBody, FormGroup, Label, Button } from \"reactstrap\";\r\n\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\r\nimport * as Yup from \"yup\";\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport Http from \"../../../helpers/Http\";\r\nimport ApiRoutes from \"../../../helpers/ApiRoutes\";\r\nimport { getKM } from \"../../../helpers/Utils\";\r\n\r\n\r\nfunction App() {\r\n    const [inputList, setInputList] = useState([{\r\n        min_distance: \"\",\r\n        max_distance: \"\",\r\n        delivery_fees: \"\",\r\n        max_normal_delivery_time: \"\",\r\n        max_special_order_delivery_time: \"\"\r\n    }]);\r\n    const [min_km_val, SetMinKmVal] = useState(\"0\");\r\n    const [max_km_val, SetMaxKmVal] = useState(\"0\");\r\n    const CustomizeFormSchema = Yup.object().shape({\r\n        // warehouse_type: Yup.string().required(\"Please select a warehouse\"),\r\n        min_distance: Yup.number()\r\n            .required(\"Please enter quantity\")\r\n    });\r\n\r\n    const onChangeKM = (km_val) => {\r\n        let i = km_val;\r\n        var kmArr = [];\r\n        for (i = km_val; i <= 50; i++) {\r\n            kmArr[i] = i;\r\n        }\r\n        return kmArr;\r\n    }\r\n\r\n\r\n    const onSubmitCustomizeForm = async (inputValues) => {\r\n        handleInputChange(inputValues);\r\n        this.props.handleCustomizationSubmit(this.state.customizeForms);\r\n    };\r\n\r\n    // handle input change\r\n    const handleInputChange = (e, index) => {\r\n        if (e.target.id == \"min_distance\" + index) {\r\n            SetMaxKmVal(e.target.value);\r\n        }\r\n\r\n        const { name, value } = e.target;\r\n        const list = [...inputList];\r\n        list[index][name] = value;\r\n        setInputList(list);\r\n    };\r\n\r\n    // handle click event of the Remove button\r\n    const handleRemoveClick = index => {\r\n        const list = [...inputList];\r\n        list.splice(index, 1);\r\n        setInputList(list);\r\n    };\r\n\r\n    // handle click event of the Add button\r\n    const handleAddClick = () => {\r\n\r\n        setInputList([...inputList, { min_distance: \"\", max_distance: \"\", delivery_fees: \"\", max_normal_delivery_time: \"\", max_special_order_delivery_time: \"\" }]);\r\n    };\r\n\r\n    // LifeCycle Methods\r\n    useEffect(() => {\r\n        dataListRender();\r\n    }, []);\r\n\r\n    // Methods for Data Rendering\r\n    const dataListRender = async () => {\r\n\r\n        let path = ApiRoutes.GET_DELIVERY_SETTINGS;\r\n\r\n        const res = await Http(\"GET\", path);\r\n\r\n        if (res.status == 200) {\r\n            if (res.data.length > 0) {\r\n                setInputList(res.data)\r\n            } else {\r\n                setInputList(inputList);\r\n            }\r\n        } else {\r\n            NotificationManager.error(res.message, \"Error!\", 3000);\r\n        }\r\n\r\n    };\r\n\r\n    const onSubmit = async () => {\r\n\r\n        let formData = new FormData();\r\n\r\n        formData.append(\"settingsData\", JSON.stringify(inputList));\r\n\r\n        let path = ApiRoutes.ADD_DELIVERY_SETTINGS;\r\n        const res = await Http(\"POST\", path, formData);\r\n\r\n        if (res.status == 200) {\r\n            NotificationManager.success(res.message, \"Success!\", 3000);\r\n        } else {\r\n            NotificationManager.error(res.message, \"Error!\", 3000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row style={{ marginTop: 30 }}>\r\n            <Colxx xxs=\"12\" sm=\"12\">\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row>\r\n                            <Colxx xxs=\"12\" sm=\"12\">\r\n                                <h6 className=\"mb-4\">Delivery Settings</h6>\r\n\r\n                                {inputList.map((x, index) => {\r\n                                    return (\r\n                                        <Formik\r\n                                            validationSchema={CustomizeFormSchema}\r\n                                            onSubmit={onSubmitCustomizeForm}\r\n                                        >\r\n                                            {({\r\n                                                handleInventorySubmit,\r\n                                                setFieldValue,\r\n                                                setFieldTouched,\r\n                                                handleChange,\r\n                                                values,\r\n                                                errors,\r\n                                                touched,\r\n                                                isSubmitting,\r\n                                            }) => (\r\n                                                <Form\r\n                                                    className=\"av-tooltip tooltip-label-bottom\"\r\n                                                >\r\n                                                    <Row>\r\n                                                        <Colxx xxs=\"12\" sm=\"2\">\r\n                                                            <FormGroup className=\"form-group has-float-label\">\r\n                                                                <Label>Min distance(KM)</Label>\r\n                                                                <select\r\n                                                                    name=\"min_distance\"\r\n                                                                    className=\"form-control\"\r\n                                                                    id={\"min_distance\" + index}\r\n                                                                    data-id={index}\r\n                                                                    value={x.min_distance}\r\n                                                                    onChange={e => handleInputChange(e, index)}\r\n                                                                >\r\n                                                                    {onChangeKM(min_km_val).map(\r\n                                                                        (item, index) => {\r\n                                                                            return (\r\n                                                                                <option key={index} value={item}>\r\n                                                                                    {item}\r\n                                                                                </option>\r\n                                                                            );\r\n                                                                        }\r\n                                                                    )}\r\n                                                                </select>\r\n                                                            </FormGroup>\r\n                                                        </Colxx>\r\n\r\n                                                        <Colxx xxs=\"12\" sm=\"2\">\r\n                                                            <FormGroup className=\"form-group has-float-label\">\r\n                                                                <Label>Max distance(KM)</Label>\r\n                                                                <select\r\n                                                                    name=\"max_distance\"\r\n                                                                    className=\"form-control\"\r\n                                                                    id={\"max_distance\" + index}\r\n                                                                    data-id={index}\r\n                                                                    value={x.max_distance}\r\n                                                                    onChange={e => handleInputChange(e, index)}\r\n                                                                >\r\n                                                                    {onChangeKM(max_km_val).map(\r\n                                                                        (item, index) => {\r\n                                                                            return (\r\n                                                                                <option key={index} value={item}>\r\n                                                                                    {item}\r\n                                                                                </option>\r\n                                                                            );\r\n                                                                        }\r\n                                                                    )}\r\n                                                                </select>\r\n                                                            </FormGroup>\r\n                                                        </Colxx>\r\n\r\n                                                        <Colxx xxs=\"12\" sm=\"2\">\r\n                                                            <FormGroup className=\"form-group has-float-label\">\r\n                                                                <Label>Delivery Fees</Label>\r\n                                                                <Field\r\n                                                                    className=\"form-control\"\r\n                                                                    name=\"delivery_fees\"\r\n                                                                    type=\"text\"\r\n                                                                    value={x.delivery_fees}\r\n                                                                    onChange={e => handleInputChange(e, index)}\r\n                                                                />\r\n                                                            </FormGroup>\r\n                                                        </Colxx>\r\n\r\n                                                        <Colxx xxs=\"12\" sm=\"2\">\r\n                                                            <FormGroup className=\"form-group has-float-label\">\r\n                                                                <Label>Max Delivery Time</Label>\r\n                                                                <Field\r\n                                                                    className=\"form-control\"\r\n                                                                    name=\"max_normal_delivery_time\"\r\n                                                                    type=\"text\"\r\n                                                                    value={x.max_normal_delivery_time}\r\n                                                                    onChange={e => handleInputChange(e, index)}\r\n                                                                />\r\n                                                            </FormGroup>\r\n                                                        </Colxx>\r\n\r\n                                                        <Colxx xxs=\"12\" sm=\"2\">\r\n                                                            <FormGroup className=\"form-group has-float-label\">\r\n                                                                <Label>Max Special Delivery Time</Label>\r\n                                                                <Field\r\n                                                                    className=\"form-control\"\r\n                                                                    name=\"max_special_order_delivery_time\"\r\n                                                                    type=\"text\"\r\n                                                                    value={x.max_special_order_delivery_time}\r\n                                                                    onChange={e => handleInputChange(e, index)}\r\n                                                                />\r\n                                                            </FormGroup>\r\n                                                        </Colxx>\r\n\r\n                                                        <div className=\"btn-box\">\r\n                                                            {inputList.length !== 1 && <Button outline color=\"danger\" type=\"submit\" onClick={() => handleRemoveClick(index)}>Remove</Button>}{\" \"}\r\n                                                            {inputList.length - 1 === index && <Button outline color=\"primary\" type=\"submit\" onClick={handleAddClick}>Add</Button>}\r\n                                                        </div>\r\n                                                    </Row>\r\n\r\n                                                </Form>\r\n                                            )}\r\n                                        </Formik>\r\n                                    );\r\n                                })}\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    type=\"button\"\r\n                                    onClick={onSubmit}\r\n                                >\r\n                                    Save\r\n    </Button>{\" \"}\r\n                                {/* <div style={{ marginTop: 20 }}>{JSON.stringify(inputList)}</div> */}\r\n                            </Colxx>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Colxx>\r\n        </Row>)\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;"],"sourceRoot":""}