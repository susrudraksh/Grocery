{"version":3,"sources":["views/app/active-inactive-users/list.js","components/common/CustomBootstrap.js","containers/navs/Breadcrumb.js","containers/pages/ListPageHeading.js","containers/pages/Pagination.js"],"names":["CustomersList","props","dataListRender","a","state","isLoading","path","ApiRoutes","GET_CUSTOMERS","currentPage","selectedPageSize","selectedOrderOption","column","daysStatus","amountStatus","filterStatus","searchKeyword","Http","res","status","setState","totalPage","data","totalPages","items","docs","totalItemCount","totalDocs","resultUsersJson","pageSize","limit","users","activePage","page","csvData","map","user","index","csvData1","username","phone","email","is_active","push","NotificationManager","error","message","changeOrderBy","orderOptions","find","x","onSearchKey","e","target","value","toLowerCase","key","changeStatus","changeDaysStatus","console","log","changeAmountStatus","changePageSize","size","onChangePage","onResetFilters","label","onChangeItemStatus","itemId","currentStatus","newStatus","formData","FormData","append","UPDATE_CUSTOMER_STATUS","success","onDeleteItem","DELETE_CUSTOMER","mouseTrap","require","displayOpts","statusOptions","daysOptions","amountOptions","pageSizes","dropdownSplitOpen","searchPlaceholder","selectedItems","lastChecked","this","unbind","match","startIndex","endIndex","color","style","float","filename","id","className","heading","filterFromDate","filterToDate","onChangeFromDate","onChangeToDate","xxs","hover","item","alt","src","user_image_thumb_url","to","pathname","_id","pageIndex","register_id","pill","moment","createdAt","format","length","colSpan","i","Component","Colxx","widths","Separator","getMenuTitle","sub","getUrl","split","BreadcrumbItems","substr","paths","indexOf","filter","active","BreadcrumbContainer","orderStatus","ListPageHeading","togglePopover","prevState","popoverOpen","showPopover","hidePopover","toggleDisplayOptions","displayOptionsIsOpen","toggleSplit","selectedStatusOption","selectedDaysOption","selectedAmountOption","selectedOrderStatus","intl","messages","addNewItemRoute","changeOrderStatus","onSearchFilters","addNewBtn","keyword","fromDate","toDate","isOpen","caret","order","onClick","type","name","placeholder","onChange","onKeyPress","onFocus","onBlur","outline","placement","right","injectIntl","Pagination","numberLimit","lastIsActive","firstIsActive","startPoint","endPoint","parseInt","points","firstPageButtonClassName","lastPageButtonClassName","prevPageButtonClassName","nextPageButtonClassName","React"],"mappings":"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","file":"static/js/87.7cc5e3c2.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Row, Button, Card, CardBody, Badge, Table } from \"reactstrap\";\r\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport { NavLink,Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\n\r\nimport Switch from \"rc-switch\";\r\nimport \"rc-switch/assets/index.css\";\r\n\r\nimport Pagination from \"../../../containers/pages/Pagination\";\r\nimport ListPageHeading from \"../../../containers/pages/ListPageHeading\";\r\n\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport Http from \"../../../helpers/Http\";\r\nimport ApiRoutes from \"../../../helpers/ApiRoutes\";\r\n\r\nclass CustomersList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mouseTrap = require(\"mousetrap\");\r\n\r\n    this.state = {\r\n      displayOpts: {\r\n        //addNewBtn: true,\r\n        //keyword: true,\r\n        // fromDate: true,\r\n        //toDate: true,\r\n        //orderOptions: false,\r\n\r\n        statusOptions: true,\r\n        daysOptions: true,\r\n        amountOptions: true,\r\n        pageSizes: true,\r\n      },\r\n\r\n      // addNewItemRoute: \"/app/add-customer\",\r\n\r\n\r\n      orderOptions: [\r\n        { column: \"createdAt\", label: \"Created On\" },\r\n        { column: \"user_name\", label: \"User Name\" },\r\n        { column: \"email\", label: \"Email\" },\r\n        { column: \"status\", label: \"Status\" },\r\n      ],\r\n      selectedOrderOption: { column: \"createdAt\", label: \"Created On\" },\r\n\r\n      pageSizes: [10, 20, 30, 50, 100],\r\n      selectedPageSize: 10,\r\n      dropdownSplitOpen: false,\r\n\r\n      searchPlaceholder: \"Search by User Name, Email, Phone, Address\",\r\n      searchKeyword: \"\",\r\n      daysStatus: \"\",\r\n      amountStatus: \"\",\r\n      filterStatus: \"\",\r\n\r\n      items: [],\r\n      currentPage: 1,\r\n      totalItemCount: 0,\r\n      totalPage: 1,\r\n\r\n      selectedItems: [],\r\n      lastChecked: null,\r\n      isLoading: false,\r\n    };\r\n  }\r\n\r\n  // LifeCycle Methods\r\n  componentDidMount() {\r\n    this.dataListRender();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.mouseTrap.unbind(\"ctrl+a\");\r\n    this.mouseTrap.unbind(\"command+a\");\r\n    this.mouseTrap.unbind(\"ctrl+d\");\r\n    this.mouseTrap.unbind(\"command+d\");\r\n  }\r\n\r\n  // Methods for Data Rendering\r\n  dataListRender = async () => {\r\n    this.state.isLoading = true;\r\n\r\n    let path =\r\n      ApiRoutes.GET_CUSTOMERS +\r\n      \"?page_no=\" +\r\n      `${this.state.currentPage}` +\r\n      \"&limit=\" +\r\n      `${this.state.selectedPageSize}` +\r\n      \"&order_by=\" +\r\n      `${this.state.selectedOrderOption.column}` +\r\n      \"&days_limit=\" +\r\n      `${this.state.daysStatus}` +\r\n      \"&amount_limit=\" +\r\n      `${this.state.amountStatus}` +\r\n      \"&status=\" +\r\n      `${this.state.filterStatus}` +\r\n      \"&keyword=\" +\r\n      `${this.state.searchKeyword}`;\r\n\r\n    const res = await Http(\"GET\", path);\r\n\r\n    if (res.status == 200) {\r\n      this.setState({\r\n        totalPage: res.data.totalPages,\r\n        items: res.data.docs,\r\n        totalItemCount: res.data.totalDocs,\r\n      });\r\n\r\n      let resultUsersJson = res.data || {};\r\n\r\n      this.setState({ pageSize: resultUsersJson.limit, users: resultUsersJson, totalDocs: res.data.totalDocs, totalPages: res.data.totalPages, activePage: resultUsersJson.page || 1 });\r\n      const csvData = [];\r\n\r\n      resultUsersJson.docs.map((user, index) => {\r\n        const csvData1 = {};\r\n        csvData1['username'] = user.username;\r\n        csvData1['phone'] = user.phone;\r\n        csvData1['email'] = user.email;\r\n        csvData1['status'] = user.is_active;\r\n        csvData.push(csvData1);\r\n\r\n      })\r\n\r\n      this.setState({ 'csvData': csvData })\r\n    } else {\r\n      NotificationManager.error(res.message, \"Error!\", 3000);\r\n    }\r\n    this.setState({ isLoading: true });\r\n  };\r\n\r\n  // Methods for Filters Actions\r\n  changeOrderBy = (column) => {\r\n    this.setState(\r\n      {\r\n        selectedOrderOption: this.state.orderOptions.find(\r\n          (x) => x.column === column\r\n        ),\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  onSearchKey = (e) => {\r\n    this.setState({\r\n      searchKeyword: e.target.value.toLowerCase(),\r\n    });\r\n\r\n    if (e.key === \"Enter\") {\r\n      this.dataListRender();\r\n    }\r\n  };\r\n\r\n  changeStatus = (value) => {\r\n\r\n    this.setState(\r\n      {\r\n        filterStatus: value,\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n  changeDaysStatus = (value) => {\r\n    console.log(value);\r\n    this.setState(\r\n      {\r\n        daysStatus: value,\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n  changeAmountStatus = (value) => {\r\n    this.setState(\r\n      {\r\n        amountStatus: value,\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  changePageSize = (size) => {\r\n    this.setState(\r\n      {\r\n        selectedPageSize: size,\r\n        currentPage: 1,\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  onChangePage = (page) => {\r\n    this.setState(\r\n      {\r\n        currentPage: page,\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  onResetFilters = () => {\r\n    this.setState(\r\n      {\r\n        selectedOrderOption: { column: \"createdAt\", label: \"Created On\" },\r\n        selectedPageSize: 10,\r\n        currentPage: 1,\r\n        filterStatus: \"\",\r\n        daysStatus: \"\",\r\n        amountStatus: \"\"\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  // Methods for Actions\r\n  onChangeItemStatus = async (itemId, index, currentStatus) => {\r\n    var newStatus = currentStatus == 1 ? 0 : 1;\r\n\r\n    let formData = new FormData();\r\n    formData.append(\"status\", newStatus);\r\n\r\n    let path = ApiRoutes.UPDATE_CUSTOMER_STATUS + \"/\" + itemId;\r\n    const res = await Http(\"PUT\", path, formData);\r\n\r\n    if (res.status == 200) {\r\n      this.dataListRender();\r\n\r\n      NotificationManager.success(res.message, \"Success!\", 3000);\r\n    } else {\r\n      NotificationManager.error(res.message, \"Error!\", 3000);\r\n    }\r\n  };\r\n\r\n  onDeleteItem = async (itemId, index) => {\r\n    let path = ApiRoutes.DELETE_CUSTOMER + \"/\" + itemId;\r\n    const res = await Http(\"DELETE\", path);\r\n\r\n    if (res.status == 200) {\r\n      this.dataListRender();\r\n\r\n      NotificationManager.success(res.message, \"Success!\", 3000);\r\n    } else {\r\n      NotificationManager.error(res.message, \"Error!\", 3000);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { match } = this.props;\r\n    const startIndex =\r\n      (this.state.currentPage - 1) * this.state.selectedPageSize + 1;\r\n    const endIndex = this.state.currentPage * this.state.selectedPageSize;\r\n\r\n    return !this.state.isLoading ? (\r\n      <div className=\"loading\" />\r\n    ) : (\r\n        <Fragment>\r\n          <div>\r\n            <Button color=\"primary\" size=\"xs\" style={{ float: \"right\" }}><CSVLink data={(this.state.csvData && this.state.csvData || [])} filename={\"user-list.csv\"}><IntlMessages id=\"pages.download\" /></CSVLink></Button>\r\n          </div>\r\n\r\n          <div className=\"disable-text-selection\">\r\n            <ListPageHeading\r\n              heading=\"menu.customers\"\r\n              match={match}\r\n              displayOpts={this.state.displayOpts}\r\n              orderOptions={this.state.orderOptions}\r\n              pageSizes={this.state.pageSizes}\r\n              selectedPageSize={this.state.selectedPageSize}\r\n              selectedOrderOption={this.state.selectedOrderOption}\r\n              searchKeyword={this.state.searchKeyword}\r\n              searchPlaceholder={this.state.searchPlaceholder}\r\n              filterFromDate={this.state.filterFromDate}\r\n              filterToDate={this.state.filterToDate}\r\n              filterStatus={this.state.filterStatus}\r\n              daysStatus={this.state.daysStatus}\r\n              amountStatus={this.state.amountStatus}\r\n              onSearchKey={this.onSearchKey}\r\n              onChangeFromDate={this.onChangeFromDate}\r\n              onChangeToDate={this.onChangeToDate}\r\n              changeOrderBy={this.changeOrderBy}\r\n              changeStatus={this.changeStatus}\r\n              changeDaysStatus={this.changeDaysStatus}\r\n              changeAmountStatus={this.changeAmountStatus}\r\n              changePageSize={this.changePageSize}\r\n              onResetFilters={this.onResetFilters}\r\n              totalItemCount={this.state.totalItemCount}\r\n              startIndex={startIndex}\r\n              endIndex={endIndex}\r\n            />\r\n\r\n            <Row>\r\n              <Colxx xxs=\"12\">\r\n                <Card className=\"mb-4\">\r\n                  <CardBody>\r\n                    <Table hover>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>#</th>\r\n                          <th>Image</th>\r\n                          <th>User Name</th>\r\n                          <th>User Code</th>\r\n                          <th>Email</th>\r\n                          <th>Phone</th>\r\n                          <th>Status</th>\r\n                          <th>Created On</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {this.state.items.map((item, index) => {\r\n                          return (\r\n                            <tr key={index}>\r\n                              <td>{(this.state.selectedPageSize * (this.state.currentPage -1)) + index +1}</td>\r\n                              <td>\r\n                                <img\r\n                                  alt={item.username} \r\n                                  src={item.user_image_thumb_url}\r\n                                  className=\"img-thumbnail border-0 list-thumbnail align-self-center xsmall\"\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                              <Link to={{\r\n                                  pathname: `edit-customer/${item._id}`,\r\n                                  state: {\r\n                                    pageIndex: this.state.currentPage\r\n                                  }\r\n                                }}>\r\n                                {/* <NavLink to={`edit-customer/${item._id}`}> */}\r\n                                  {item.username}\r\n                                </Link>\r\n                              </td>\r\n                              <td>{item.register_id}</td>\r\n                              <td>{item.email}</td>\r\n                              <td>{item.phone}</td>\r\n                              <td>\r\n                                <Badge\r\n                                  color={\r\n                                    item.is_active\r\n                                      ? \"outline-success\"\r\n                                      : \"outline-danger\"\r\n                                  }\r\n                                  pill\r\n                                >\r\n                                  {item.is_active ? (\r\n                                    <IntlMessages id=\"label.active\" />\r\n                                  ) : (\r\n                                      <IntlMessages id=\"label.inactive\" />\r\n                                    )}\r\n                                </Badge>\r\n                              </td>\r\n                              <td>{moment(item.createdAt).format(\"lll\")}</td>\r\n\r\n                            </tr>\r\n                          );\r\n                        })}\r\n\r\n                        {this.state.items.length == 0 && (\r\n                          <tr>\r\n                            <td colSpan=\"8\" className=\"text-center\">\r\n                              No data available.\r\n                          </td>\r\n                          </tr>\r\n                        )}\r\n                      </tbody>\r\n                    </Table>\r\n\r\n                    <Pagination\r\n                      currentPage={this.state.currentPage}\r\n                      totalPage={this.state.totalPage}\r\n                      onChangePage={(i) => this.onChangePage(i)}\r\n                    />\r\n                  </CardBody>\r\n                </Card>\r\n              </Colxx>\r\n            </Row>\r\n          </div>\r\n        </Fragment>\r\n      );\r\n  }\r\n}\r\nexport default CustomersList;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading} /></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                  getMenuTitle(sub)\r\n                )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Row,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Collapse,\r\n  Tooltip,\r\n  Popover,\r\n  PopoverBody\r\n} from \"reactstrap\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Colxx, Separator } from \"../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../navs/Breadcrumb\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nvar statusOptions = [\r\n  { column: \"\", label: \"All\" },\r\n  { column: \"1\", label: \"Active\" },\r\n  { column: \"0\", label: \"Inactive\" },\r\n];\r\nvar daysOptions = [\r\n  { value: \"\", label: \"Select\" },\r\n  { value: \"1\", label: \"Last 30 Days\" },\r\n  { value: \"2\", label: \"Last 60 Days\" },\r\n  { value: \"3\", label: \"Last 90 Days\" },\r\n];\r\nvar amountOptions = [\r\n  { value: \"\", label: \"Select\" },\r\n  { value: \"20\", label: \"20 K\" },\r\n  { value: \"40\", label: \"40 K\" },\r\n];\r\nvar orderStatus = [\r\n  { value: \"\", label: \"Select\" },\r\n  { value: \"\", label: \"All\" },\r\n  { value: \"2\", label: \"Passed\" },\r\n  { value: \"1\", label: \"Current\" },\r\n];\r\n\r\nclass ListPageHeading extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      popoverOpen: false,\r\n      dropdownSplitOpen: false,\r\n      displayOptionsIsOpen: false,\r\n      selectedStatusOption: statusOptions[0],\r\n      selectedDaysOption: daysOptions[0],\r\n      selectedAmountOption: amountOptions[0],\r\n      selectedOrderStatus: orderStatus[0],\r\n    };\r\n  }\r\n\r\n  togglePopover = () => {\r\n    this.setState(prevState => ({\r\n      popoverOpen: !prevState.popoverOpen\r\n    }));\r\n  };\r\n\r\n  showPopover = () => {\r\n    this.setState(prevState => ({ popoverOpen: true }));\r\n  };\r\n\r\n  hidePopover = () => {\r\n    this.setState(prevState => ({ popoverOpen: false }));\r\n  };\r\n\r\n  toggleDisplayOptions = () => {\r\n    this.setState((prevState) => ({\r\n      displayOptionsIsOpen: !prevState.displayOptionsIsOpen,\r\n    }));\r\n  };\r\n\r\n  toggleSplit = () => {\r\n    this.setState((prevState) => ({\r\n      dropdownSplitOpen: !prevState.dropdownSplitOpen,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    const {\r\n      heading,\r\n      match,\r\n      addNewItemRoute,\r\n      displayOpts,\r\n      orderOptions,\r\n      pageSizes,\r\n      selectedPageSize,\r\n      selectedOrderOption,\r\n      searchKeyword,\r\n      searchPlaceholder,\r\n      filterFromDate,\r\n      filterToDate,\r\n      filterStatus,\r\n      onSearchKey,\r\n      onChangeFromDate,\r\n      onChangeToDate,\r\n      changeOrderBy,\r\n      changeStatus,\r\n      changeDaysStatus,\r\n      changeAmountStatus,\r\n      changeOrderStatus,\r\n      changePageSize,\r\n      onResetFilters,\r\n      onSearchFilters,\r\n      totalItemCount,\r\n      startIndex,\r\n      endIndex,\r\n      daysStatus,\r\n      amountStatus\r\n    } = this.props;\r\n\r\n    const { displayOptionsIsOpen } = this.state;\r\n    return (\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <div className=\"mb-2\">\r\n            <h1>\r\n              <IntlMessages id={heading} />\r\n            </h1>\r\n\r\n            {displayOpts && displayOpts.addNewBtn && (\r\n              <div className=\"text-zero top-right-button-container\">\r\n                <NavLink to={addNewItemRoute}>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    size=\"lg\"\r\n                    className=\"top-right-button\"\r\n                  >\r\n                    <IntlMessages id=\"pages.add-new\" />\r\n                  </Button>\r\n                </NavLink>\r\n              </div>\r\n            )}\r\n\r\n            <Breadcrumb match={match} />\r\n          </div>\r\n\r\n          {displayOpts &&\r\n            (displayOpts.addNewBtn ||\r\n              displayOpts.orderOptions ||\r\n              displayOpts.pageSizes ||\r\n              displayOpts.keyword ||\r\n              displayOpts.fromDate ||\r\n              displayOpts.toDate) && (\r\n              <div className=\"mb-2\">\r\n                <Collapse\r\n                  isOpen={displayOptionsIsOpen}\r\n                  className=\"d-md-block\"\r\n                  id=\"displayOptions\"\r\n                >\r\n                  <div className=\"d-block d-md-inline-block pt-1\">\r\n                    {displayOpts && displayOpts.orderOptions && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.orderby\" />\r\n                          {selectedOrderOption.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {orderOptions.map((order, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => changeOrderBy(order.column)}\r\n                              >\r\n                                {order.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.keyword && (\r\n                      <div className=\"search-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"keyword\"\r\n                          id=\"search\"\r\n                          value={searchKeyword}\r\n                          placeholder=\"Type and enter...\"\r\n                          onChange={(e) => {\r\n                            onSearchKey(e)\r\n                            this.hidePopover()\r\n                          }}\r\n                          onKeyPress={(e) => onSearchKey(e)}\r\n                          onFocus={this.showPopover}\r\n                          onBlur={this.hidePopover}\r\n                        />\r\n                        {displayOpts &&\r\n                      (displayOpts.keyword ||\r\n                        displayOpts.daysOptions ||\r\n                        displayOpts.orderStatus ||\r\n                        displayOpts.amountOptions ||\r\n                        displayOpts.fromDate ||\r\n                        displayOpts.toDate) && (\r\n                        <Button\r\n                          outline\r\n                          color=\"danger\"\r\n                          className=\"mb-2 btn-xs search_btn\"\r\n                          onClick={() => {\r\n                            onSearchFilters()\r\n                          }}\r\n                        >\r\n                        </Button>\r\n                      )}\r\n                       {' '}\r\n                        <Popover\r\n                          className=\"search-popover\"\r\n                          placement=\"top\"\r\n                          isOpen={this.state.popoverOpen}\r\n                          target={\"search\"}\r\n                        >\r\n                          \r\n                          <PopoverBody>{searchPlaceholder}</PopoverBody>\r\n                        </Popover>\r\n                      </div>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.fromDate && (\r\n                      <div className=\"filter-date-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                        <input\r\n                          type=\"date\"\r\n                          name=\"fromdate\"\r\n                          id=\"fromdate\"\r\n                          value={filterFromDate}\r\n                          placeholder=\"dd/mm/yyyy\"\r\n                          onChange={(e) => onChangeFromDate(e)}\r\n                        />\r\n                      </div>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.toDate && (\r\n                      <div className=\"filter-date-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                        <input\r\n                          type=\"date\"\r\n                          name=\"todate\"\r\n                          id=\"todate\"\r\n                          value={filterToDate}\r\n                          placeholder=\"dd/mm/yyyy\"\r\n                          onChange={(e) => onChangeToDate(e)}\r\n                        />\r\n                      </div>\r\n                    )}\r\n\r\n\r\n                    {displayOpts && displayOpts.daysOptions && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.status\" />\r\n                          {this.state.selectedDaysOption.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {daysOptions.map((status, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  this.setState({ selectedDaysOption: daysOptions[index] });\r\n                                  changeDaysStatus(status.value)\r\n                                }}\r\n                              >\r\n                                {status.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n                    {displayOpts && displayOpts.amountOptions && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.status\" />\r\n                          {this.state.selectedAmountOption.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {amountOptions.map((status, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  this.setState({ selectedAmountOption: amountOptions[index] });\r\n                                  changeAmountStatus(status.value)\r\n                                }}\r\n                              >\r\n                                {status.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.orderStatus && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.status\" />\r\n                          {this.state.selectedOrderStatus.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {orderStatus.map((status, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  this.setState({ selectedOrderStatus: orderStatus[index] });\r\n                                  changeOrderStatus(status.value)\r\n                                }}\r\n                              >\r\n                                {status.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.statusOptions && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.status\" />\r\n                          {this.state.selectedStatusOption.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {statusOptions.map((status, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  this.setState({ selectedStatusOption: statusOptions[index] });\r\n                                  changeStatus(status.column)\r\n                                }}\r\n                              >\r\n                                {status.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n                   \r\n                    \r\n\r\n                    {displayOpts &&\r\n                      (displayOpts.keyword ||\r\n                        displayOpts.daysOptions ||\r\n                        displayOpts.orderStatus ||\r\n                        displayOpts.amountOptions ||\r\n                        displayOpts.fromDate ||\r\n                        displayOpts.toDate) && (\r\n                        <Button\r\n                          outline\r\n                          color=\"danger\"\r\n                          className=\"mb-2 btn-xs\"\r\n                          onClick={() => {\r\n                            this.setState({ selectedOrderStatus: orderStatus[0] });\r\n                            this.setState({ selectedStatusOption: statusOptions[0] });\r\n                            onResetFilters()\r\n                          }}\r\n                        >\r\n                          <IntlMessages id=\"button.reset\" />\r\n                        </Button>\r\n                      )}\r\n                  </div>\r\n\r\n                  {displayOpts && displayOpts.pageSizes && (\r\n                    <div className=\"float-md-right pt-1\">\r\n                      <span className=\"text-muted text-small mr-1\">\r\n                        {`${startIndex}-${endIndex} of ${totalItemCount} `}\r\n                      </span>\r\n                      <UncontrolledDropdown className=\"d-inline-block\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          {selectedPageSize}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          {pageSizes.map((size, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => changePageSize(size)}\r\n                              >\r\n                                {size}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                  )}\r\n                </Collapse>\r\n              </div>\r\n            )}\r\n          <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectIntl(ListPageHeading);\r\n","import React from \"react\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\nimport { Nav, NavItem, NavLink } from \"reactstrap\";\r\nclass Pagination extends React.Component {\r\n  componentDidMount() { }\r\n  onChangePage(e) {\r\n    this.props.onChangePage(e);\r\n  }\r\n  render() {\r\n    const {\r\n      totalPage = 0,\r\n      currentPage = 1,\r\n      numberLimit = 5,\r\n      lastIsActive = true,\r\n      firstIsActive = true\r\n    } = this.props;\r\n\r\n    let startPoint = 1;\r\n    let endPoint = numberLimit;\r\n\r\n    if (numberLimit > totalPage) {\r\n      startPoint = 1;\r\n      endPoint = totalPage;\r\n    } else if (currentPage <= parseInt(numberLimit / 2, 10)) {\r\n      startPoint = 1;\r\n      endPoint = numberLimit;\r\n    } else if (currentPage + parseInt(numberLimit / 2, 10) <= totalPage) {\r\n      startPoint = currentPage - parseInt(numberLimit / 2, 10);\r\n      endPoint = currentPage + parseInt(numberLimit / 2, 10);\r\n    } else {\r\n      startPoint = totalPage - (numberLimit - 1);\r\n      endPoint = totalPage;\r\n    }\r\n    startPoint = startPoint === 0 ? 1 : startPoint;\r\n    const points = [];\r\n    for (var i = startPoint; i <= endPoint; i++) {\r\n      points.push(i);\r\n    }\r\n\r\n    let firstPageButtonClassName = currentPage <= 1 ? \"disabled\" : \"\";\r\n    let lastPageButtonClassName = currentPage >= totalPage ? \"disabled\" : \"\";\r\n    let prevPageButtonClassName = currentPage <= 1 ? \"disabled\" : \"\";\r\n    let nextPageButtonClassName = currentPage >= totalPage ? \"disabled\" : \"\";\r\n    return totalPage > 1 ? (\r\n      <Colxx xxs=\"12\" className=\"mt-3\">\r\n        <Nav className=\"pagination justify-content-center\">\r\n          {firstIsActive && (\r\n            <NavItem className={`page-item ${firstPageButtonClassName}`}>\r\n              <NavLink\r\n                className=\"page-link first\"\r\n                onClick={() => this.onChangePage(1)}>\r\n                <i className=\"simple-icon-control-start\" />\r\n              </NavLink>\r\n            </NavItem>\r\n          )}\r\n\r\n          <NavItem className={`page-item ${prevPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link prev\"\r\n              onClick={() => this.onChangePage(currentPage - 1)}\r\n            >\r\n              <i className=\"simple-icon-arrow-left\" />\r\n            </NavLink>\r\n          </NavItem>\r\n          {points.map(i => {\r\n            return (\r\n              <NavItem\r\n                key={i}\r\n                className={`page-item ${currentPage === i && \"active\"}`}>\r\n                <NavLink\r\n                  className=\"page-link\"\r\n                  onClick={() => this.onChangePage(i)}\r\n                >\r\n                  {i}\r\n                </NavLink>\r\n              </NavItem>\r\n            );\r\n          })}\r\n          <NavItem className={`page-item ${nextPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link next\"\r\n              onClick={() => this.onChangePage(currentPage + 1)}\r\n            >\r\n              <i className=\"simple-icon-arrow-right\" />\r\n            </NavLink>\r\n          </NavItem>\r\n          {lastIsActive && (\r\n            <NavItem className={`page-item ${lastPageButtonClassName}`}>\r\n              <NavLink\r\n                className=\"page-link last\"\r\n                onClick={() => this.onChangePage(totalPage)}>\r\n                <i className=\"simple-icon-control-end\" />\r\n              </NavLink>\r\n            </NavItem>\r\n          )}\r\n        </Nav>\r\n      </Colxx>\r\n    ) : (\r\n        <Colxx xxs=\"12\" className=\"mt-2\" />\r\n      );\r\n  }\r\n}\r\n\r\nexport default Pagination;\r\n"],"sourceRoot":""}