{"version":3,"sources":["views/app/orders/list.js","components/common/CustomBootstrap.js","containers/navs/Breadcrumb.js","containers/pages/ListPageHeading.js","containers/pages/Pagination.js"],"names":["FormSchema","Yup","shape","driver_id","required","newstatus","OrderList","props","getActiveDrivers","a","state","isLoading","path","ApiRoutes","GET_ACTIVE_DRIVERS","Http","res","status","setState","activeDriverList","data","NotificationManager","error","message","dataListRender","GET_ORDERS","currentPage","selectedPageSize","searchKeyword","filterStatus","items","docs","totalPage","totalPages","totalItemCount","totalDocs","changePageSize","size","onChangePage","page","history","push","pathname","location","pageIndex","onSearchKey","e","target","value","toLowerCase","key","changeOrderStatus","onSearchFilters","onResetFilters","toggle","item","prevState","modal","handleSubmit","inputValues","_","isEmpty","user_permissions","formData","FormData","append","JSON","stringify","ASSIGN_ORDER","success","window","reload","handleChangePermissions","warehouse_id","checked_value","is_checked","checked","index","indexOf","splice","length","mouseTrap","require","displayOpts","keyword","pageSizes","orderStatus","activeItemId","_id","username","dropdownSplitOpen","searchPlaceholder","selectedItems","lastChecked","ischecked","warehouseId","this","unbind","match","startIndex","endIndex","color","className","style","float","onClick","id","heading","xxs","hover","map","hasOwnProperty","order_status","type","onChange","name","data-module","order_id","user_name","phone","moment","createdAt","format","net_amount","discounted_amount","payment_mode","to","outline","title","colSpan","i","isOpen","initialValues","validationSchema","onSubmit","setFieldValue","values","setFieldTouched","handleChange","errors","touched","isSubmitting","sm","event","Component","Colxx","widths","Separator","getMenuTitle","sub","getUrl","split","BreadcrumbItems","substr","paths","filter","x","active","BreadcrumbContainer","statusOptions","column","label","daysOptions","amountOptions","ListPageHeading","togglePopover","popoverOpen","showPopover","hidePopover","toggleDisplayOptions","displayOptionsIsOpen","toggleSplit","selectedStatusOption","selectedDaysOption","selectedAmountOption","selectedOrderStatus","intl","messages","addNewItemRoute","orderOptions","selectedOrderOption","filterFromDate","filterToDate","onChangeFromDate","onChangeToDate","changeOrderBy","changeStatus","changeDaysStatus","changeAmountStatus","daysStatus","amountStatus","addNewBtn","fromDate","toDate","caret","order","placeholder","onKeyPress","onFocus","onBlur","placement","right","injectIntl","Pagination","numberLimit","lastIsActive","firstIsActive","startPoint","endPoint","parseInt","points","firstPageButtonClassName","lastPageButtonClassName","prevPageButtonClassName","nextPageButtonClassName","React"],"mappings":"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","file":"static/js/88.b16eb705.chunk.js","sourcesContent":["\"use strict\";\r\n\r\nimport React, { Component, Fragment, StrictMode } from \"react\";\r\nimport {\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Table,\r\n  Modal,\r\n  ModalHeader,\r\n  FormGroup,\r\n  Label,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"rc-switch/assets/index.css\";\r\n\r\n\r\nimport Pagination from \"../../../containers/pages/Pagination\";\r\nimport ListPageHeading from \"../../../containers/pages/ListPageHeading\";\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\n\r\nimport Http from \"../../../helpers/Http\";\r\nimport ApiRoutes from \"../../../helpers/ApiRoutes\";\r\n\r\nconst FormSchema = Yup.object().shape({\r\n  driver_id: Yup.string().required(\"Please select available driver\"),\r\n});\r\n\r\nconst newstatus = [\"\",\"Assigned\",\"Completed\",\"Rejected\",\"Cancelled\",\"Cancelled/Rejected\"]\r\n\r\nclass OrderList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mouseTrap = require(\"mousetrap\");\r\n\r\n    this.state = {\r\n      displayOpts: {\r\n        keyword: true,\r\n        pageSizes: true,\r\n        orderStatus: true,\r\n        activeItemId: null,\r\n      },\r\n      modal: false,\r\n\r\n      activeDriverList: [{ _id: \"\", username: \"Select Driver\" }],\r\n\r\n      pageSizes: [10, 20, 30],\r\n      selectedPageSize: 10,\r\n      dropdownSplitOpen: false,\r\n\r\n      searchPlaceholder: \"Search by Order Number\",\r\n      searchKeyword: \"\",\r\n      filterStatus: \"\",\r\n\r\n      items: [],\r\n      currentPage: 1,\r\n      totalItemCount: 0,\r\n      totalPage: 1,\r\n\r\n      selectedItems: [],\r\n      lastChecked: null,\r\n      isLoading: false,\r\n      ischecked: false,\r\n      user_permissions: [],\r\n      warehouseId: \"\"\r\n    };\r\n  }\r\n\r\n  // LifeCycle Methods\r\n async componentDidMount() {\r\n  await this.props.history.location.state ? this.setState({currentPage:this.props.history.location.state.pageIndex}) : this.setState({currentPage:1})\r\n\r\n    this.dataListRender();\r\n  }\r\n\r\n  getActiveDrivers = async () => {\r\n    this.state.isLoading = true;\r\n\r\n    // let path = ApiRoutes.GET_ACTIVE_DRIVERS + \"?page_no=1&limit=100\";\r\n    let path = ApiRoutes.GET_ACTIVE_DRIVERS;\r\n\r\n    const res = await Http(\"GET\", path);\r\n\r\n    if (res.status == 200) {\r\n      this.setState({ activeDriverList: [''] });\r\n      this.setState({\r\n        activeDriverList: [...this.state.activeDriverList, ...res.data],\r\n      });\r\n    } else {\r\n      NotificationManager.error(res.message, \"Error!\", 3000);\r\n    }\r\n  };\r\n\r\n  dataListRender = async () => {\r\n    this.state.isLoading = true;\r\n\r\n    let path = ApiRoutes.GET_ORDERS + \"?page_no=\" +\r\n      `${this.state.currentPage}` +\r\n      \"&limit=\" +\r\n      `${this.state.selectedPageSize}` +\r\n      \"&keyword=\" +\r\n      `${this.state.searchKeyword}` +\r\n      \"&order_status=\" +\r\n      `${this.state.filterStatus}`;\r\n\r\n    const res = await Http(\"GET\", path);\r\n\r\n    if (res.status == 200) {\r\n      this.setState({\r\n        items: res.data.docs,\r\n        totalPage: res.data.totalPages,\r\n        totalItemCount: res.data.totalDocs,\r\n      });\r\n    } else {\r\n      NotificationManager.error(res.message, \"Error!\", 3000);\r\n    }\r\n    this.setState({ isLoading: true });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.mouseTrap.unbind(\"ctrl+a\");\r\n    this.mouseTrap.unbind(\"command+a\");\r\n    this.mouseTrap.unbind(\"ctrl+d\");\r\n    this.mouseTrap.unbind(\"command+d\");\r\n  }\r\n\r\n  // Methods for Filters Actions\r\n  changePageSize = (size) => {\r\n    this.setState(\r\n      {\r\n        selectedPageSize: size,\r\n        currentPage: 1,\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  onChangePage = (page) => {\r\n    this.setState(\r\n      {\r\n        currentPage: page,\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n    this.props.history.push({pathname:this.props.location.pathname, state:{pageIndex:page}})\r\n\r\n  };\r\n\r\n  onSearchKey = (e) => {\r\n    this.setState({\r\n      searchKeyword: e.target.value.toLowerCase(),\r\n      currentPage: 1,\r\n    });\r\n\r\n    if (e.key === \"Enter\") {\r\n      this.dataListRender();\r\n    }\r\n  };\r\n\r\n  changeOrderStatus = (value) => {\r\n    this.setState(\r\n      {\r\n        filterStatus: value,\r\n        currentPage: 1,\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  onSearchFilters = () => {\r\n    this.setState({\r\n      currentPage: 1,\r\n    }, () => this.dataListRender()\r\n    )\r\n  };\r\n\r\n  onResetFilters = () => {\r\n    this.setState(\r\n      {\r\n        selectedPageSize: 10,\r\n        currentPage: 1,\r\n        searchKeyword: \"\",\r\n        filterStatus: \"\",\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  toggle = (item) => {\r\n    this.getActiveDrivers();\r\n    this.setState((prevState) => ({\r\n      modal: !prevState.modal,\r\n      //activeItemId: item.name,\r\n    }));\r\n  };\r\n\r\n  handleSubmit = async (inputValues) => {\r\n    if (!_.isEmpty(this.state.user_permissions)) {\r\n\r\n      let formData = new FormData();\r\n\r\n      formData.append(\"driver_id\", inputValues.driver_id);\r\n      formData.append(\"order_arr\", JSON.stringify(this.state.user_permissions));\r\n\r\n      let path = ApiRoutes.ASSIGN_ORDER;\r\n      const res = await Http(\"POST\", path, formData);\r\n\r\n      if (res.status == 200) {\r\n        NotificationManager.success(res.message, \"Success!\", 3000);\r\n        window.location.reload();\r\n      } else {\r\n        NotificationManager.error(res.message, \"Error!\", 3000);\r\n      }\r\n    } else {\r\n      NotificationManager.error(\"Please select atleast one order.\", \"Error!\", 3000);\r\n    }\r\n  };\r\n\r\n  handleChangePermissions = (e, warehouse_id) => {\r\n\r\n    var checked_value = e.target.value;\r\n    var is_checked = e.target.checked;\r\n    var user_permissions = this.state.user_permissions;\r\n\r\n    // if any permission is checked\r\n    if (is_checked) {\r\n      if (!user_permissions) {\r\n        user_permissions = [];\r\n      }\r\n      user_permissions.push(checked_value);\r\n    } else {\r\n      let index = user_permissions.indexOf(checked_value);\r\n      user_permissions.splice(index, 1);\r\n\r\n      if (user_permissions.length == 0) {\r\n        //delete user_permissions;\r\n      }\r\n    }\r\n    this.setState({ user_permissions: user_permissions });\r\n\r\n  };\r\n\r\n  render() {\r\n\r\n    const { ischecked } = this.state;\r\n    const { match } = this.props;\r\n    const startIndex =\r\n      (this.state.currentPage - 1) * this.state.selectedPageSize + 1;\r\n    const endIndex = this.state.currentPage * this.state.selectedPageSize;\r\n\r\n    return !this.state.isLoading ? (\r\n      <div className=\"loading\" />\r\n    ) : (\r\n        <Fragment>\r\n         <div>\r\n            <Button\r\n              color=\"primary\"\r\n              size=\"xs\"\r\n              className=\"top-right-button\"\r\n              style={{ float: \"right\" }}\r\n              onClick={() => this.toggle()}\r\n            >\r\n              <IntlMessages id=\"pages.assign-new\" />\r\n            </Button>\r\n          </div>\r\n          <div className=\"disable-text-selection\">\r\n            <ListPageHeading\r\n              heading=\"menu.orders\"\r\n              match={match}\r\n              displayOpts={this.state.displayOpts}\r\n              pageSizes={this.state.pageSizes}\r\n              selectedPageSize={this.state.selectedPageSize}\r\n              searchPlaceholder={this.state.searchPlaceholder}\r\n              searchKeyword={this.state.searchKeyword}\r\n              filterStatus={this.state.filterStatus}\r\n              onSearchKey={this.onSearchKey}\r\n              changePageSize={this.changePageSize}\r\n              changeOrderStatus={this.changeOrderStatus}\r\n              onSearchFilters={this.onSearchFilters}\r\n              onResetFilters={this.onResetFilters}\r\n              totalItemCount={this.state.totalItemCount}\r\n              startIndex={startIndex}\r\n              endIndex={endIndex}\r\n            />\r\n\r\n            <Row>\r\n              <Colxx xxs=\"12\">\r\n                <Card className=\"mb-4\">\r\n                  <CardBody>\r\n                    <Table hover>\r\n                      <thead>\r\n                        <tr>\r\n                          <th className=\"custom-control custom-checkbox pl-1 align-self-center pr-4\">\r\n                            Select order\r\n                            {/* <FormGroup className=\"mb-0\">\r\n                              <CustomInput\r\n                                type=\"checkbox\"\r\n                                id=\"check1\"\r\n                                label=\"\"\r\n                                title=\"Select All\"\r\n                              // onChange={this.Itemschecked}\r\n                              />\r\n                            </FormGroup> */}\r\n                          </th>\r\n                          <th>Order#</th>\r\n                          <th>Customer Name</th>\r\n                          <th>Customer Phone Number</th>\r\n                          <th>Order Status</th>\r\n                          <th>Order On</th>\r\n                          <th>Total Price</th>\r\n                          <th>Discounted Price</th>\r\n                          <th>Payment Mode</th>\r\n\r\n                          <th>Action</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {this.state.items.map((item, index) => {\r\n                          return (\r\n                            <tr key={index}>\r\n                              <td>\r\n                                {(() => {\r\n                                  if (item.hasOwnProperty('driver_id')) {\r\n                                    if (item.driver_id.length == 0 && item.order_status==0) {\r\n                                      return (\r\n                                        <Input\r\n                                          className=\"form-check-input\"\r\n                                          type=\"checkbox\"\r\n                                          onChange={(e) => {\r\n                                            this.handleChangePermissions(e, item.warehouse_id);\r\n                                          }}\r\n                                          id={item._id}\r\n                                          name={item._id}\r\n                                          data-module={item._id}\r\n                                          value={item._id}\r\n                                        />\r\n                                      )\r\n                                    } else {\r\n                                      if (item.order_status>2) {\r\n                                        return (\r\n                                          <div>Not Available</div>\r\n                                        )\r\n                                      }else{\r\n                                        return (\r\n                                          <div>Assigned</div>\r\n                                        )\r\n                                      }\r\n                                    }\r\n                                  } else {\r\n                                    if (item.order_status>2) {\r\n                                      return (\r\n                                        <div>Not Available</div>\r\n                                      )\r\n                                    }else{\r\n                                    return (\r\n                                      <Input\r\n                                        className=\"form-check-input\"\r\n                                        type=\"checkbox\"\r\n                                        onChange={(e) => {\r\n                                          this.handleChangePermissions(e, item.warehouse_id);\r\n                                        }}\r\n                                        id={item._id}\r\n                                        name={item._id}\r\n                                        data-module={item._id}\r\n                                        value={item._id}\r\n                                      />\r\n                                    )\r\n                                    }\r\n                                  }\r\n                                })()}\r\n\r\n                                {/* {!item.hasOwnProperty('driver_id') && item.driver_id == \"\" ?\r\n                                  (<Input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    onChange={(e) => {\r\n                                      this.handleChangePermissions(e, item.warehouse_id);\r\n                                    }}\r\n                                    id={item._id}\r\n                                    name={item._id}\r\n                                    data-module={item._id}\r\n                                    value={item._id}\r\n                                  />) : \"Assigned\"\r\n                                } */}\r\n                              </td>\r\n                              <td>{item.order_id}</td>\r\n                              <td>{item.user_name} </td>\r\n                              <td>{item.phone} </td>\r\n                              <td>{(item.order_status!=0)?newstatus[item.order_status]:'Pending'}</td>\r\n                              <td>{moment(item.createdAt).format(\"lll\")}</td>\r\n                              <td>{item.net_amount}</td>\r\n                              <td>{item.discounted_amount}</td>\r\n                              <td>{item.payment_mode}</td>\r\n\r\n                              <td>\r\n                                {/* {\r\n                                (item.driver_id.length == 0)?\r\n                                <Button\r\n                                  outline\r\n                                  color=\"primary\"\r\n                                  size=\"xs\"\r\n                                  className=\"mb-2\"\r\n                                  title=\"Available Drivers\"\r\n                                  onClick={() => this.toggle(item)}\r\n                                >\r\n                                  <div\r\n                                    className=\"glyph-icon simple-icon-user\"\r\n                                    item={item}\r\n                                  ></div>\r\n                                </Button> \r\n                                :\"\"} */}\r\n                                <NavLink to={`order-detail/${item._id}`}>\r\n                                  <Button\r\n                                    outline\r\n                                    color=\"info\"\r\n                                    size=\"xs\"\r\n                                    className=\"mb-2\"\r\n                                    title=\"More info\"\r\n                                  >\r\n                                    <div\r\n                                      className=\"glyph-icon simple-icon-info\"\r\n                                      item={item}\r\n                                    ></div>\r\n                                  </Button>\r\n                                </NavLink>{\" \"}\r\n\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n\r\n                        {this.state.items.length == 0 && (\r\n                          <tr>\r\n                            <td colSpan=\"5\" className=\"text-center\">\r\n                              No data available.\r\n                          </td>\r\n                          </tr>\r\n                        )}\r\n                      </tbody>\r\n                    </Table>\r\n\r\n                    <Pagination\r\n                      currentPage={this.state.currentPage}\r\n                      totalPage={this.state.totalPage}\r\n                      onChangePage={(i) => this.onChangePage(i)}\r\n                    />\r\n                  </CardBody>\r\n                </Card>\r\n              </Colxx>\r\n            </Row>\r\n          </div>\r\n          <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n            <ModalHeader toggle={this.toggle}>{\"Assign Driver\"}</ModalHeader>\r\n\r\n            <ModalBody>\r\n              <Formik\r\n                initialValues={{\r\n                  driver_id: this.state.driver_id,\r\n                }}\r\n                validationSchema={FormSchema}\r\n                onSubmit={this.handleSubmit}\r\n              >\r\n                {({\r\n                  handleSubmit,\r\n                  setFieldValue,\r\n                  setFieldTouched,\r\n                  handleChange,\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  isSubmitting,\r\n                }) => (\r\n                    <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                      <Row className=\"align-items-center\">\r\n                        <Colxx className=\"text-center\" xxs=\"12\" sm=\"4\">\r\n                          <Label>Drivers</Label>\r\n                        </Colxx>\r\n                        <Colxx xxs=\"12\" sm=\"8\">\r\n                          <FormGroup className=\"form-group has-float-label\">\r\n                            <select\r\n                              name=\"driver_id\"\r\n                              className=\"form-control\"\r\n                              value={values.driver_id}\r\n                              onChange={(event) => {\r\n                                setFieldValue(\"driver_id\", event.target.value);\r\n                              }}\r\n                            >\r\n                              {this.state.activeDriverList.map((item, index) => {\r\n                                return (\r\n                                  <option key={index} value={item._id}>\r\n                                    {item.username}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </select>\r\n\r\n                            {errors.driver_id && touched.driver_id ? (\r\n                              <div className=\"invalid-feedback d-block\">\r\n                                {errors.driver_id}\r\n                              </div>\r\n                            ) : null}\r\n                          </FormGroup>\r\n                        </Colxx>\r\n                      </Row>\r\n\r\n                      <ModalFooter>\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                          Assign\r\n                    </Button>{\" \"}\r\n                        <Button color=\"secondary\" onClick={this.toggle}>\r\n                          Cancel\r\n                    </Button>\r\n                      </ModalFooter>\r\n                    </Form>\r\n                  )}\r\n              </Formik>\r\n            </ModalBody>\r\n          </Modal>\r\n        </Fragment>\r\n      );\r\n  }\r\n}\r\nexport default OrderList;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading} /></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                  getMenuTitle(sub)\r\n                )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Row,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Collapse,\r\n  Tooltip,\r\n  Popover,\r\n  PopoverBody\r\n} from \"reactstrap\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Colxx, Separator } from \"../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../navs/Breadcrumb\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nvar statusOptions = [\r\n  { column: \"\", label: \"All\" },\r\n  { column: \"1\", label: \"Active\" },\r\n  { column: \"0\", label: \"Inactive\" },\r\n];\r\nvar daysOptions = [\r\n  { value: \"\", label: \"Select\" },\r\n  { value: \"1\", label: \"Last 30 Days\" },\r\n  { value: \"2\", label: \"Last 60 Days\" },\r\n  { value: \"3\", label: \"Last 90 Days\" },\r\n];\r\nvar amountOptions = [\r\n  { value: \"\", label: \"Select\" },\r\n  { value: \"20\", label: \"20 K\" },\r\n  { value: \"40\", label: \"40 K\" },\r\n];\r\nvar orderStatus = [\r\n  { value: \"\", label: \"Select\" },\r\n  { value: \"\", label: \"All\" },\r\n  { value: \"2\", label: \"Passed\" },\r\n  { value: \"1\", label: \"Current\" },\r\n];\r\n\r\nclass ListPageHeading extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      popoverOpen: false,\r\n      dropdownSplitOpen: false,\r\n      displayOptionsIsOpen: false,\r\n      selectedStatusOption: statusOptions[0],\r\n      selectedDaysOption: daysOptions[0],\r\n      selectedAmountOption: amountOptions[0],\r\n      selectedOrderStatus: orderStatus[0],\r\n    };\r\n  }\r\n\r\n  togglePopover = () => {\r\n    this.setState(prevState => ({\r\n      popoverOpen: !prevState.popoverOpen\r\n    }));\r\n  };\r\n\r\n  showPopover = () => {\r\n    this.setState(prevState => ({ popoverOpen: true }));\r\n  };\r\n\r\n  hidePopover = () => {\r\n    this.setState(prevState => ({ popoverOpen: false }));\r\n  };\r\n\r\n  toggleDisplayOptions = () => {\r\n    this.setState((prevState) => ({\r\n      displayOptionsIsOpen: !prevState.displayOptionsIsOpen,\r\n    }));\r\n  };\r\n\r\n  toggleSplit = () => {\r\n    this.setState((prevState) => ({\r\n      dropdownSplitOpen: !prevState.dropdownSplitOpen,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    const {\r\n      heading,\r\n      match,\r\n      addNewItemRoute,\r\n      displayOpts,\r\n      orderOptions,\r\n      pageSizes,\r\n      selectedPageSize,\r\n      selectedOrderOption,\r\n      searchKeyword,\r\n      searchPlaceholder,\r\n      filterFromDate,\r\n      filterToDate,\r\n      filterStatus,\r\n      onSearchKey,\r\n      onChangeFromDate,\r\n      onChangeToDate,\r\n      changeOrderBy,\r\n      changeStatus,\r\n      changeDaysStatus,\r\n      changeAmountStatus,\r\n      changeOrderStatus,\r\n      changePageSize,\r\n      onResetFilters,\r\n      onSearchFilters,\r\n      totalItemCount,\r\n      startIndex,\r\n      endIndex,\r\n      daysStatus,\r\n      amountStatus\r\n    } = this.props;\r\n\r\n    const { displayOptionsIsOpen } = this.state;\r\n    return (\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <div className=\"mb-2\">\r\n            <h1>\r\n              <IntlMessages id={heading} />\r\n            </h1>\r\n\r\n            {displayOpts && displayOpts.addNewBtn && (\r\n              <div className=\"text-zero top-right-button-container\">\r\n                <NavLink to={addNewItemRoute}>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    size=\"lg\"\r\n                    className=\"top-right-button\"\r\n                  >\r\n                    <IntlMessages id=\"pages.add-new\" />\r\n                  </Button>\r\n                </NavLink>\r\n              </div>\r\n            )}\r\n\r\n            <Breadcrumb match={match} />\r\n          </div>\r\n\r\n          {displayOpts &&\r\n            (displayOpts.addNewBtn ||\r\n              displayOpts.orderOptions ||\r\n              displayOpts.pageSizes ||\r\n              displayOpts.keyword ||\r\n              displayOpts.fromDate ||\r\n              displayOpts.toDate) && (\r\n              <div className=\"mb-2\">\r\n                <Collapse\r\n                  isOpen={displayOptionsIsOpen}\r\n                  className=\"d-md-block\"\r\n                  id=\"displayOptions\"\r\n                >\r\n                  <div className=\"d-block d-md-inline-block pt-1\">\r\n                    {displayOpts && displayOpts.orderOptions && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.orderby\" />\r\n                          {selectedOrderOption.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {orderOptions.map((order, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => changeOrderBy(order.column)}\r\n                              >\r\n                                {order.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.keyword && (\r\n                      <div className=\"search-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"keyword\"\r\n                          id=\"search\"\r\n                          value={searchKeyword}\r\n                          placeholder=\"Type and enter...\"\r\n                          onChange={(e) => {\r\n                            onSearchKey(e)\r\n                            this.hidePopover()\r\n                          }}\r\n                          onKeyPress={(e) => onSearchKey(e)}\r\n                          onFocus={this.showPopover}\r\n                          onBlur={this.hidePopover}\r\n                        />\r\n                        {displayOpts &&\r\n                      (displayOpts.keyword ||\r\n                        displayOpts.daysOptions ||\r\n                        displayOpts.orderStatus ||\r\n                        displayOpts.amountOptions ||\r\n                        displayOpts.fromDate ||\r\n                        displayOpts.toDate) && (\r\n                        <Button\r\n                          outline\r\n                          color=\"danger\"\r\n                          className=\"mb-2 btn-xs search_btn\"\r\n                          onClick={() => {\r\n                            onSearchFilters()\r\n                          }}\r\n                        >\r\n                        </Button>\r\n                      )}\r\n                       {' '}\r\n                        <Popover\r\n                          className=\"search-popover\"\r\n                          placement=\"top\"\r\n                          isOpen={this.state.popoverOpen}\r\n                          target={\"search\"}\r\n                        >\r\n                          \r\n                          <PopoverBody>{searchPlaceholder}</PopoverBody>\r\n                        </Popover>\r\n                      </div>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.fromDate && (\r\n                      <div className=\"filter-date-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                        <input\r\n                          type=\"date\"\r\n                          name=\"fromdate\"\r\n                          id=\"fromdate\"\r\n                          value={filterFromDate}\r\n                          placeholder=\"dd/mm/yyyy\"\r\n                          onChange={(e) => onChangeFromDate(e)}\r\n                        />\r\n                      </div>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.toDate && (\r\n                      <div className=\"filter-date-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                        <input\r\n                          type=\"date\"\r\n                          name=\"todate\"\r\n                          id=\"todate\"\r\n                          value={filterToDate}\r\n                          placeholder=\"dd/mm/yyyy\"\r\n                          onChange={(e) => onChangeToDate(e)}\r\n                        />\r\n                      </div>\r\n                    )}\r\n\r\n\r\n                    {displayOpts && displayOpts.daysOptions && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.status\" />\r\n                          {this.state.selectedDaysOption.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {daysOptions.map((status, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  this.setState({ selectedDaysOption: daysOptions[index] });\r\n                                  changeDaysStatus(status.value)\r\n                                }}\r\n                              >\r\n                                {status.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n                    {displayOpts && displayOpts.amountOptions && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.status\" />\r\n                          {this.state.selectedAmountOption.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {amountOptions.map((status, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  this.setState({ selectedAmountOption: amountOptions[index] });\r\n                                  changeAmountStatus(status.value)\r\n                                }}\r\n                              >\r\n                                {status.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.orderStatus && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.status\" />\r\n                          {this.state.selectedOrderStatus.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {orderStatus.map((status, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  this.setState({ selectedOrderStatus: orderStatus[index] });\r\n                                  changeOrderStatus(status.value)\r\n                                }}\r\n                              >\r\n                                {status.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n\r\n                    {displayOpts && displayOpts.statusOptions && (\r\n                      <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          <IntlMessages id=\"pages.status\" />\r\n                          {this.state.selectedStatusOption.label}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                          {statusOptions.map((status, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  this.setState({ selectedStatusOption: statusOptions[index] });\r\n                                  changeStatus(status.column)\r\n                                }}\r\n                              >\r\n                                {status.label}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    )}\r\n                   \r\n                    \r\n\r\n                    {displayOpts &&\r\n                      (displayOpts.keyword ||\r\n                        displayOpts.daysOptions ||\r\n                        displayOpts.orderStatus ||\r\n                        displayOpts.amountOptions ||\r\n                        displayOpts.fromDate ||\r\n                        displayOpts.toDate) && (\r\n                        <Button\r\n                          outline\r\n                          color=\"danger\"\r\n                          className=\"mb-2 btn-xs\"\r\n                          onClick={() => {\r\n                            this.setState({ selectedOrderStatus: orderStatus[0] });\r\n                            this.setState({ selectedStatusOption: statusOptions[0] });\r\n                            onResetFilters()\r\n                          }}\r\n                        >\r\n                          <IntlMessages id=\"button.reset\" />\r\n                        </Button>\r\n                      )}\r\n                  </div>\r\n\r\n                  {displayOpts && displayOpts.pageSizes && (\r\n                    <div className=\"float-md-right pt-1\">\r\n                      <span className=\"text-muted text-small mr-1\">\r\n                        {`${startIndex}-${endIndex} of ${totalItemCount} `}\r\n                      </span>\r\n                      <UncontrolledDropdown className=\"d-inline-block\">\r\n                        <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                          {selectedPageSize}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          {pageSizes.map((size, index) => {\r\n                            return (\r\n                              <DropdownItem\r\n                                key={index}\r\n                                onClick={() => changePageSize(size)}\r\n                              >\r\n                                {size}\r\n                              </DropdownItem>\r\n                            );\r\n                          })}\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                  )}\r\n                </Collapse>\r\n              </div>\r\n            )}\r\n          <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectIntl(ListPageHeading);\r\n","import React from \"react\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\nimport { Nav, NavItem, NavLink } from \"reactstrap\";\r\nclass Pagination extends React.Component {\r\n  componentDidMount() { }\r\n  onChangePage(e) {\r\n    this.props.onChangePage(e);\r\n  }\r\n  render() {\r\n    const {\r\n      totalPage = 0,\r\n      currentPage = 1,\r\n      numberLimit = 5,\r\n      lastIsActive = true,\r\n      firstIsActive = true\r\n    } = this.props;\r\n\r\n    let startPoint = 1;\r\n    let endPoint = numberLimit;\r\n\r\n    if (numberLimit > totalPage) {\r\n      startPoint = 1;\r\n      endPoint = totalPage;\r\n    } else if (currentPage <= parseInt(numberLimit / 2, 10)) {\r\n      startPoint = 1;\r\n      endPoint = numberLimit;\r\n    } else if (currentPage + parseInt(numberLimit / 2, 10) <= totalPage) {\r\n      startPoint = currentPage - parseInt(numberLimit / 2, 10);\r\n      endPoint = currentPage + parseInt(numberLimit / 2, 10);\r\n    } else {\r\n      startPoint = totalPage - (numberLimit - 1);\r\n      endPoint = totalPage;\r\n    }\r\n    startPoint = startPoint === 0 ? 1 : startPoint;\r\n    const points = [];\r\n    for (var i = startPoint; i <= endPoint; i++) {\r\n      points.push(i);\r\n    }\r\n\r\n    let firstPageButtonClassName = currentPage <= 1 ? \"disabled\" : \"\";\r\n    let lastPageButtonClassName = currentPage >= totalPage ? \"disabled\" : \"\";\r\n    let prevPageButtonClassName = currentPage <= 1 ? \"disabled\" : \"\";\r\n    let nextPageButtonClassName = currentPage >= totalPage ? \"disabled\" : \"\";\r\n    return totalPage > 1 ? (\r\n      <Colxx xxs=\"12\" className=\"mt-3\">\r\n        <Nav className=\"pagination justify-content-center\">\r\n          {firstIsActive && (\r\n            <NavItem className={`page-item ${firstPageButtonClassName}`}>\r\n              <NavLink\r\n                className=\"page-link first\"\r\n                onClick={() => this.onChangePage(1)}>\r\n                <i className=\"simple-icon-control-start\" />\r\n              </NavLink>\r\n            </NavItem>\r\n          )}\r\n\r\n          <NavItem className={`page-item ${prevPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link prev\"\r\n              onClick={() => this.onChangePage(currentPage - 1)}\r\n            >\r\n              <i className=\"simple-icon-arrow-left\" />\r\n            </NavLink>\r\n          </NavItem>\r\n          {points.map(i => {\r\n            return (\r\n              <NavItem\r\n                key={i}\r\n                className={`page-item ${currentPage === i && \"active\"}`}>\r\n                <NavLink\r\n                  className=\"page-link\"\r\n                  onClick={() => this.onChangePage(i)}\r\n                >\r\n                  {i}\r\n                </NavLink>\r\n              </NavItem>\r\n            );\r\n          })}\r\n          <NavItem className={`page-item ${nextPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link next\"\r\n              onClick={() => this.onChangePage(currentPage + 1)}\r\n            >\r\n              <i className=\"simple-icon-arrow-right\" />\r\n            </NavLink>\r\n          </NavItem>\r\n          {lastIsActive && (\r\n            <NavItem className={`page-item ${lastPageButtonClassName}`}>\r\n              <NavLink\r\n                className=\"page-link last\"\r\n                onClick={() => this.onChangePage(totalPage)}>\r\n                <i className=\"simple-icon-control-end\" />\r\n              </NavLink>\r\n            </NavItem>\r\n          )}\r\n        </Nav>\r\n      </Colxx>\r\n    ) : (\r\n        <Colxx xxs=\"12\" className=\"mt-2\" />\r\n      );\r\n  }\r\n}\r\n\r\nexport default Pagination;\r\n"],"sourceRoot":""}