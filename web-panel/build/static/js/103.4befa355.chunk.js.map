{"version":3,"sources":["views/app/drivers/track.js"],"names":["AnyReactComponent","text","class","style","color","renderMap","props","dataListRender","a","state","isLoading","path","ApiRoutes","GET_BRANDS","currentPage","selectedPageSize","filterStatus","searchKeyword","Http","res","status","setState","totalPage","data","totalPages","items","docs","totalItemCount","totalDocs","NotificationManager","error","message","mouseTrap","require","console","log","location","displayOpts","addNewBtn","keyword","user_id","_id","user_name","username","lat","geoLocation","coordinates","lng","selectedItems","lastChecked","history","pageIndex","map","maps","Marker","bounds","LatLngBounds","database","ref","this","on","snap","extend","LatLng","child","val","fitBounds","height","width","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","onGoogleApiLoaded","renderMarkers","yesIWantToUseGoogleMapApiInternals","Component","defaultProps"],"mappings":"oRASMA,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,6BAAK,uBAAGC,MAAM,qCAAqCC,MAAO,CAAC,YAAa,OAAOC,MAAM,MAAM,cAAe,UAAcH,IAW1JI,E,YAQJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA0CRC,eA3CmB,qBA2CF,8BAAAC,EAAA,4DACf,EAAKC,MAAMC,WAAY,EAEnBC,EACFC,IAAUC,WACV,YADA,UAEG,EAAKJ,MAAMK,aACd,UAHA,UAIG,EAAKL,MAAMM,kBACd,WALA,UAMG,EAAKN,MAAMO,cACd,YAPA,UAQG,EAAKP,MAAMQ,eAZD,SAcGC,YAAK,MAAOP,GAdf,OAgBG,YAFZQ,EAdS,QAgBPC,OACN,EAAKC,SAAS,CACZC,UAAWH,EAAII,KAAKC,WACpBC,MAAON,EAAII,KAAKG,KAChBC,eAAgBR,EAAII,KAAKK,YAG3BC,IAAoBC,MAAMX,EAAIY,QAAS,SAAU,KAGnD,EAAKV,SAAS,CAAEX,WAAW,IA1BZ,yCAzCf,EAAKsB,UAAYC,EAAQ,KACzBC,QAAQC,IAAI,EAAK7B,MAAM8B,UAEvB,EAAK3B,MAAQ,CACX4B,YAAa,CACXC,WAAW,EACXC,SAAS,GAGXC,QAAQ,EAAKlC,MAAM8B,SAAS3B,MAAMc,MAAQ,EAAKjB,MAAM8B,SAAS3B,MAAMc,KAAKkB,KAAO,GAChFC,UAAU,EAAKpC,MAAM8B,SAAS3B,MAAMc,MAAQ,EAAKjB,MAAM8B,SAAS3B,MAAMc,KAAKoB,UAAY,GACvFC,IAAKtC,EAAMiB,MAAQjB,EAAMiB,KAAKsB,YAAYC,YAAY,IAAM,UAC5DC,IAAKzC,EAAMiB,MAAQjB,EAAMiB,KAAKsB,YAAYC,YAAY,IAAM,WAE5D7B,cAAe,GACfD,aAAc,GAEdgC,cAAe,GACfC,YAAa,KACbvC,WAAW,EACXI,YAAa,EAAKR,MAAM4C,QAAQd,SAAS3B,MAAM0C,WAtBhC,E,wHA0ELC,EAAKC,GAAO,IAAD,OACxBnB,QAAQC,IAAI,IAAIkB,EAAKC,OAAO,OAC3B,IAAMC,EAAS,IAAIF,EAAKG,aAIVC,IAASC,IAAT,0BAAgCC,KAAKlD,MAAM+B,UAEjDoB,GAAG,QAAS,SAAAC,GAEhB,IAAIR,EAAKC,OAAO,MAKdC,EAAOO,OAAO,IAAIT,EAAKU,OACrBF,EAAKG,MAAM,OAAOC,MAClBJ,EAAKG,MAAM,OAAOC,QAEpBb,EAAIc,UAAUX,GAElB,EAAKlC,SAAS,CACZuB,IAAKiB,EAAKG,MAAM,OAAOC,MACvBlB,IAAKc,EAAKG,MAAM,OAAOC,Y,+BAMnB,IAAD,OACP,OAEE,yBAAK9D,MAAO,CAAEgE,OAAQ,QAASC,MAAO,SACpC,kBAAC,IAAD,CACEC,iBAAkB,CAAEC,IAAK,2CACzBC,cAAeZ,KAAKrD,MAAMkE,OAC1BC,YAAad,KAAKrD,MAAMoE,KACxBC,kBAAmB,gBAAGvB,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAR,OAAmB,EAAKuB,cAAcxB,EAAKC,IAC9DwB,oCAAkC,GAGlC,kBAAC7E,EAAD,CACE4C,IAAKe,KAAKlD,MAAMmC,IAChBG,IAAKY,KAAKlD,MAAMsC,IAChB9C,KAAK,oB,GA9HO6E,aAAlBzE,EACG0E,aAAe,CACpBP,OAAQ,CACN5B,IAAK,QACLG,IAAK,SAEP2B,KAAM,IA+HKrE","file":"static/js/103.4befa355.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport firebase from 'firebase'\r\nimport GoogleMapReact,{} from 'google-map-react';\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport \"rc-switch/assets/index.css\";\r\nimport Http from \"../../../helpers/Http\";\r\nimport { auth, database } from \"../../../helpers/Firebase\"\r\nimport ApiRoutes from \"../../../helpers/ApiRoutes\";\r\n\r\nconst AnyReactComponent = ({ text }) => <div><i class=\"glyph-icon iconsminds-map-marker-2\" style={{\"font-size\": \"32px\",color:\"red\",\"line-height\": \"42px\"}}></i>{text}</div>;\r\nconst getMapBounds = (map, maps, places) => {\r\n    const bounds = new maps.LatLngBounds();\r\n    places.forEach((place) => {\r\n      bounds.extend(new maps.LatLng(\r\n        place.geometry.location.lat,\r\n        place.geometry.location.lng,\r\n      ));\r\n    });\r\n    return bounds;\r\n  };\r\nclass renderMap extends Component {\r\n  static defaultProps = {\r\n    center: {\r\n      lat: 24.5854,\r\n      lng: 73.7125\r\n    },\r\n    zoom: 10\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.mouseTrap = require(\"mousetrap\");\r\n    console.log(this.props.location)\r\n    debugger\r\n    this.state = {\r\n      displayOpts: {\r\n        addNewBtn: true,\r\n        keyword: true,\r\n      },\r\n     \r\n      user_id:this.props.location.state.data && this.props.location.state.data._id || \"\",\r\n      user_name:this.props.location.state.data && this.props.location.state.data.username || \"\",\r\n      lat: props.data && props.data.geoLocation.coordinates[1] || 34.039328,\r\n      lng: props.data && props.data.geoLocation.coordinates[0] || 74.7904645,\r\n\r\n      searchKeyword: \"\",\r\n      filterStatus: \"\",\r\n\r\n      selectedItems: [],\r\n      lastChecked: null,\r\n      isLoading: false,\r\n      currentPage: this.props.history.location.state.pageIndex,\r\n\r\n    };\r\n  }\r\n\r\n  // LifeCycle Methods\r\n  componentDidMount() {\r\n\r\n    // var rootRef = database.ref(`/athwas_drivers/${'5fe99a2d12d5874bdd5db02d'}`);\r\n    // rootRef.on(\"value\", snap => {\r\n    //   this.setState({\r\n    //     lat: snap.child(\"lat\").val(),\r\n    //     lng: snap.child(\"lng\").val()\r\n    //   })\r\n    //  // renderMarkers(map, maps);\r\n    // });\r\n\r\n  }\r\n\r\n\r\n  // Methods for Data Rendering\r\n  dataListRender = async () => {\r\n    this.state.isLoading = true;\r\n\r\n    let path =\r\n      ApiRoutes.GET_BRANDS +\r\n      \"?page_no=\" +\r\n      `${this.state.currentPage}` +\r\n      \"&limit=\" +\r\n      `${this.state.selectedPageSize}` +\r\n      \"&status=\" +\r\n      `${this.state.filterStatus}` +\r\n      \"&keyword=\" +\r\n      `${this.state.searchKeyword}`;\r\n\r\n    const res = await Http(\"GET\", path);\r\n\r\n    if (res.status == \"success\") {\r\n      this.setState({\r\n        totalPage: res.data.totalPages,\r\n        items: res.data.docs,\r\n        totalItemCount: res.data.totalDocs,\r\n      });\r\n    } else {\r\n      NotificationManager.error(res.message, \"Error!\", 3000);\r\n    }\r\n\r\n    this.setState({ isLoading: true });\r\n  };\r\n\r\n  \r\n  \r\n  renderMarkers(map, maps) {\r\n   console.log(new maps.Marker(null));\r\n    const bounds = new maps.LatLngBounds();\r\n    \r\n    // Fit map to bounds\r\n    \r\n    var rootRef = database.ref(`/athwas_drivers/${this.state.user_id}`);\r\n    \r\n    rootRef.on(\"value\", snap => {\r\n        debugger\r\n        new maps.Marker(null);\r\n        // this.setState({\r\n\r\n        // })\r\n       \r\n          bounds.extend(new maps.LatLng(\r\n            snap.child(\"lat\").val(),\r\n            snap.child(\"lng\").val(),\r\n          ));\r\n          map.fitBounds(bounds);\r\n    //     console.log(snap.child(\"lat\").val());\r\n      this.setState({\r\n        lat: snap.child(\"lat\").val(),\r\n        lng: snap.child(\"lng\").val()\r\n      })\r\n    });\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <div style={{ height: '100vh', width: '100%' }}>\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: \"AIzaSyCnHXmtGqz7eOZg2rW9U20KDit1tRF6rhU\" }}\r\n          defaultCenter={this.props.center}\r\n          defaultZoom={this.props.zoom}\r\n          onGoogleApiLoaded={({ map, maps }) => this.renderMarkers(map, maps)}\r\n          yesIWantToUseGoogleMapApiInternals\r\n        >\r\n\r\n          <AnyReactComponent\r\n            lat={this.state.lat}\r\n            lng={this.state.lng}\r\n            text=\"My Marker\"\r\n          />\r\n        </GoogleMapReact>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default renderMap;\r\n"],"sourceRoot":""}