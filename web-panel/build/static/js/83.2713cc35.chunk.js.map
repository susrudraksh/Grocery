{"version":3,"sources":["components/common/CustomSelectInput.js","views/app/notifications/index.js","components/common/CustomBootstrap.js","containers/navs/Breadcrumb.js","../node_modules/reactstrap/es/Breadcrumb.js","../node_modules/reactstrap/es/BreadcrumbItem.js","../node_modules/reactstrap/es/CardBody.js"],"names":["CustomSelectInput","props","customProps","Object","assign","autoCorrect","autoCapitalize","Input","FormSchema","Yup","shape","notification_text","required","min","max","sent_to","user_type","sent_to_users","Notifications","onChangeSendTo","value","setState","showUsersField","selectedUsers","getUsersList","onChangeDays","daysCount","onChangeAmount","orderAmount","onChangeStatus","usersStatus","onChangeUserType","a","path","ApiRoutes","GET_CUSTOMER_LIST","state","Http","res","status","usersList","data","map","user","index","label","username","_id","key","NotificationManager","error","message","handleSubmit","inputValues","formOptions","userIdsArr","el","userIdStr","length","join","setFieldError","formData","FormData","append","JSON","stringify","login_id","ADD_NOTIFICATION","success","window","location","reload","MultiValue","Option","createClass","render","this","type","checked","isSelected","onChange","e","userData","parse","localStorage","getItem","sendToOpts","daysFilter","orderFilter","activeInactive","userType","bind","Row","xxs","Breadcrumb","heading","match","className","sm","Card","CardBody","enableReinitialize","initialValues","validationSchema","onSubmit","setFieldValue","values","setFieldTouched","handleChange","errors","touched","isSubmitting","FormGroup","Label","name","event","target","item","component","components","classNamePrefix","isMulti","options","selectedOptions","Button","color","IntlMessages","id","Component","injectIntl","Colxx","widths","Separator","getMenuTitle","sub","getUrl","split","BreadcrumbItems","substr","paths","indexOf","filter","x","active","to","BreadcrumbContainer","propTypes","tag","listTag","string","listClassName","cssModule","object","children","node","Tag","ListTag","attributes","classes","listClasses","createElement","defaultProps","bool","BreadcrumbItem","undefined","innerRef","oneOfType","func","ref"],"mappings":"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","file":"static/js/83.2713cc35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { components } from \"react-select\";\r\n\r\nconst CustomSelectInput = props => {\r\n  var customProps = Object.assign({}, props);\r\n  delete customProps.autoCorrect;\r\n  delete customProps.autoCapitalize;\r\n  return <components.Input {...customProps} />;\r\n};\r\n\r\nexport default CustomSelectInput\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport Select, { components } from 'react-select';\r\nimport { Row, Card, CardBody, FormGroup, Label, Button } from \"reactstrap\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport CustomSelectInput from \"../../../components/common/CustomSelectInput\";\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport createClass from \"create-react-class\";\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport Http from \"../../../helpers/Http\";\r\nimport ApiRoutes from \"../../../helpers/ApiRoutes\";\r\n\r\n\r\nconst FormSchema = Yup.object().shape({\r\n  notification_text: Yup.string()\r\n    .required(\"Please enter notfication text\")\r\n    .min(2, \"Too Short! Atleast 2 letters.\")\r\n    .max(100, \"Too Long! Atmost 100 letters.\"),\r\n  sent_to: Yup.string().required(\"Please select an option\"),\r\n  user_type: Yup.mixed().required(\"Please select an option\"),\r\n  sent_to_users: Yup.string(),\r\n});\r\n\r\nclass Notifications extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var userData = JSON.parse(localStorage.getItem(\"userData\")) || {};\r\n    var login_id = localStorage.getItem(\"user_id\") || {};\r\n\r\n    this.state = {\r\n      userData: userData,\r\n      login_id: login_id,\r\n      notification_text: \"\",\r\n      sent_to: \"all_users\",\r\n      sent_to_users: [],\r\n\r\n      sendToOpts: [\r\n        { value: \"all_users\", label: \"All Users\" },\r\n        { value: \"selected_users\", label: \"Selected Users\" },\r\n      ],\r\n      daysFilter: [\r\n        { value: \"\", label: \"Select\" },\r\n        { value: \"1\", label: \"Last 30 Days\" },\r\n        { value: \"2\", label: \"Last 60 Days\" },\r\n        { value: \"3\", label: \"Last 90 Days\" },\r\n      ],\r\n      orderFilter: [\r\n        { value: \"\", label: \"Select\" },\r\n        { value: \"20\", label: \"20 K\" },\r\n        { value: \"40\", label: \"40 K\" },\r\n      ],\r\n      activeInactive: [\r\n        { value: \"\", label: \"Select\" },\r\n        { value: \"1\", label: \"Active\" },\r\n        { value: \"0\", label: \"Inactive\" },\r\n      ],\r\n      userType: [\r\n        { value: \"\", label: \"Select\" },\r\n        { value: \"3\", label: \"Customer\" },\r\n        { value: \"4\", label: \"Driver\" },\r\n      ],\r\n      usersList: [],\r\n      selectedUsers: [],\r\n      showUsersField: false,\r\n      usersStatus: 1,\r\n      user_type: \"\",\r\n      daysCount: 1,\r\n      orderAmount: 20\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() { }\r\n\r\n  onChangeSendTo = (value) => {\r\n    if (value == \"all_users\") {\r\n      this.setState({\r\n        showUsersField: false,\r\n        selectedUsers: [],\r\n      });\r\n    } else {\r\n      this.getUsersList();\r\n      this.setState({ showUsersField: true });\r\n    }\r\n  };\r\n\r\n  onChangeDays = (value) => {\r\n    this.setState({\r\n      daysCount: value\r\n    })\r\n  };\r\n  onChangeAmount = (value) => {\r\n    this.setState({\r\n      orderAmount: value\r\n    })\r\n  };\r\n  onChangeStatus = (value) => {\r\n    this.setState({\r\n      usersStatus: value\r\n    })\r\n  }\r\n\r\n  onChangeUserType = (value) => {\r\n    this.setState({\r\n      user_type: value\r\n    })\r\n  }\r\n\r\n  getUsersList = async () => {\r\n    let path = ApiRoutes.GET_CUSTOMER_LIST\r\n\r\n      + \"?status=\" + `${this.state.usersStatus}`\r\n      + \"&days_limit=\" + `${this.state.daysCount}`\r\n      + \"&amount_limit=\" + `${this.state.orderAmount}`\r\n      + \"&user_type=\" + `${this.state.user_type}`;\r\n\r\n    const res = await Http(\"GET\", path);\r\n\r\n    if (res.status == 200) {\r\n      var usersList = res.data.map((user, index) => {\r\n        return {\r\n          label: user.username,\r\n          value: user._id,\r\n          key: index,\r\n        };\r\n      });\r\n      this.setState({ usersList: usersList });\r\n    } else {\r\n      NotificationManager.error(res.message, \"Error!\", 3000);\r\n    }\r\n  };\r\n\r\n  handleSubmit = async (inputValues, formOptions) => {\r\n\r\n    var userIdsArr = this.state.selectedUsers.map(function (el) {\r\n      return el.value;\r\n    });\r\n\r\n    var userIdStr = userIdsArr.length > 0 ? userIdsArr.join(\",\") : \"\";\r\n\r\n    if (inputValues.sent_to == \"selected_users\" && userIdStr == \"\") {\r\n      formOptions.setFieldError(\"sent_to_users\", \"Please select an user\");\r\n    } else {\r\n      let formData = new FormData();\r\n      formData.append(\"notification_text\", inputValues.notification_text);\r\n      formData.append(\"sent_to\", inputValues.sent_to);\r\n      formData.append(\"sent_to_users\", JSON.stringify(userIdsArr));\r\n      formData.append(\"sender_id\", this.state.login_id)\r\n      formData.append(\"user_type\", this.state.user_type)\r\n      formData.append(\"status\", this.state.usersStatus)\r\n      formData.append(\"days_limit\", this.state.daysCount)\r\n      formData.append(\"amount_limit\", this.state.orderAmount)\r\n\r\n      let path = ApiRoutes.ADD_NOTIFICATION;\r\n      const res = await Http(\"POST\", path, formData);\r\n\r\n      if (res.status == 200) {\r\n        NotificationManager.success(res.message, \"Success!\", 3000);\r\n        window.location.reload();\r\n      } else {\r\n        NotificationManager.error(res.message, \"Error!\", 3000);\r\n      }\r\n    }\r\n  };\r\n\r\n  MultiValue = (props) => {\r\n    return (\r\n      <components.MultiValue {...props}>\r\n        <span>{props.data.label}</span>\r\n      </components.MultiValue>\r\n    );\r\n  };\r\n\r\n  Option = createClass({\r\n    render() {\r\n      return (\r\n        <div>\r\n          <components.Option {...this.props}>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={this.props.isSelected}\r\n              onChange={e => null}\r\n            />{\" \"}\r\n            <label>{this.props.label} </label>\r\n          </components.Option>\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Fragment>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Breadcrumb\r\n              heading=\"heading.notifications\"\r\n              match={this.props.match}\r\n            />\r\n            <Separator className=\"mb-5\" />\r\n          </Colxx>\r\n        </Row>\r\n        <Row>\r\n          <Colxx xxs=\"12\" sm=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Formik\r\n                  enableReinitialize\r\n                  initialValues={{\r\n                    notification_text: this.state.notification_text,\r\n                    sent_to: this.state.sent_to,\r\n                    sent_to_users: this.state.sent_to_users,\r\n                  }}\r\n                  validationSchema={FormSchema}\r\n                  onSubmit={this.handleSubmit}\r\n                >\r\n                  {({\r\n                    handleSubmit,\r\n                    setFieldValue,\r\n                    setFieldTouched,\r\n                    handleChange,\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    isSubmitting,\r\n                  }) => (\r\n                    <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                      <Row>\r\n                        <Colxx xxs=\"12\" sm=\"6\">\r\n                          <FormGroup className=\"form-group has-float-label\">\r\n                            <Label>Select User Type</Label>\r\n                            <select\r\n                              name=\"user_type\"\r\n                              className=\"form-control\"\r\n                              value={values.user_type}\r\n                              onChange={(event) => {\r\n                                setFieldValue(\r\n                                  \"user_type\",\r\n                                  event.target.value\r\n                                );\r\n                                this.setState({ user_type: event.target.value }, () => this.getUsersList());\r\n                              \r\n                              }}\r\n                            >\r\n                              <option value=\"\">Select</option>,\r\n                                  <option value=\"3\">Customer</option>,\r\n                                  <option value=\"4\">Driver</option>\r\n                            </select>\r\n                            {errors.user_type &&\r\n                              touched.user_type ? (\r\n                                <div className=\"invalid-feedback d-block\">\r\n                                  {errors.user_type}\r\n                                </div>\r\n                              ) : null}\r\n                          </FormGroup>\r\n                        </Colxx>\r\n                      </Row>\r\n                      {this.state.user_type == 3 ?\r\n                      (<>\r\n                        <Row>\r\n                        <Colxx xxs=\"12\" sm=\"6\">\r\n                          <FormGroup className=\"form-group has-float-label\">\r\n                            <Label>Select Days Filter</Label>\r\n                            <select\r\n                              name=\"daysCount\"\r\n                              className=\"form-control\"\r\n                              value={values.daysCount}\r\n                              onChange={(e) => {\r\n                                setFieldValue(\"daysCount\", e.target.value);\r\n                                this.onChangeDays(e.target.value);\r\n                                this.getUsersList();\r\n                              }}\r\n                            >\r\n                              {this.state.daysFilter.map((item, index) => {\r\n                                return (\r\n                                  <option key={index} value={item.value}>\r\n                                    {item.label}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                            {errors.daysCount && touched.daysCount ? (\r\n                              <div className=\"invalid-feedback d-block\">\r\n                                {errors.daysCount}\r\n                              </div>\r\n                            ) : null}\r\n                          </FormGroup>\r\n                        </Colxx>\r\n                      </Row>\r\n\r\n                     <Row>\r\n                        <Colxx xxs=\"12\" sm=\"6\">\r\n                          <FormGroup className=\"form-group has-float-label\">\r\n                            <Label>Select Order Filter</Label>\r\n                            <select\r\n                              name=\"orderAmount\"\r\n                              className=\"form-control\"\r\n                              value={values.orderAmount}\r\n                              onChange={(e) => {\r\n                                setFieldValue(\"orderAmount\", e.target.value);\r\n                                this.onChangeAmount(e.target.value);\r\n                                this.getUsersList();\r\n                              }}\r\n                            >\r\n                              {this.state.orderFilter.map((item, index) => {\r\n                                return (\r\n                                  <option key={index} value={item.value}>\r\n                                    {item.label}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                            {errors.orderAmount && touched.orderAmount ? (\r\n                              <div className=\"invalid-feedback d-block\">\r\n                                {errors.orderAmount}\r\n                              </div>\r\n                            ) : null}\r\n                          </FormGroup>\r\n                        </Colxx>\r\n                      </Row> </>):\"\"\r\n                    }\r\n\r\n                      {/* <Row>\r\n                        <Colxx xxs=\"12\" sm=\"6\">\r\n                          <FormGroup className=\"form-group has-float-label\">\r\n                            <Label>Status</Label>\r\n                            <select\r\n                              name=\"usersStatus\"\r\n                              className=\"form-control\"\r\n                              value={values.usersStatus}\r\n                              onChange={(e) => {\r\n                                setFieldValue(\"usersStatus\", e.target.value);\r\n                                this.onChangeStatus(e.target.value);\r\n                                this.getUsersList();\r\n                              }}\r\n                            >\r\n                              {this.state.activeInactive.map((item, index) => {\r\n                                return (\r\n                                  <option key={index} value={item.value}>\r\n                                    {item.label}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                            {errors.usersStatus && touched.usersStatus ? (\r\n                              <div className=\"invalid-feedback d-block\">\r\n                                {errors.usersStatus}\r\n                              </div>\r\n                            ) : null}\r\n                          </FormGroup>\r\n                        </Colxx>\r\n                      </Row>\r\n                      */}\r\n\r\n                      <Row>\r\n                        <Colxx xxs=\"12\" sm=\"6\">\r\n                          <FormGroup className=\"form-group has-float-label\">\r\n                            <Label>Notification Text</Label>\r\n                            <Field\r\n                              className=\"form-control\"\r\n                              name=\"notification_text\"\r\n                              component=\"textarea\"\r\n                            />\r\n                            {errors.notification_text &&\r\n                              touched.notification_text ? (\r\n                                <div className=\"invalid-feedback d-block\">\r\n                                  {errors.notification_text}\r\n                                </div>\r\n                              ) : null}\r\n                          </FormGroup>\r\n                        </Colxx>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <Colxx xxs=\"12\" sm=\"6\">\r\n                          <FormGroup className=\"form-group has-float-label\">\r\n                            <Label>Sent To</Label>\r\n                            <select\r\n                              name=\"sent_to\"\r\n                              className=\"form-control\"\r\n                              value={values.sent_to}\r\n                              onChange={(e) => {\r\n                                setFieldValue(\"sent_to\", e.target.value);\r\n                                this.onChangeSendTo(e.target.value);\r\n                              }}\r\n                            >\r\n                              {this.state.sendToOpts.map((item, index) => {\r\n                                return (\r\n                                  <option key={index} value={item.value}>\r\n                                    {item.label}\r\n                                  </option>\r\n                                );\r\n                              })}\r\n                            </select>\r\n                            {errors.sent_to && touched.sent_to ? (\r\n                              <div className=\"invalid-feedback d-block\">\r\n                                {errors.sent_to}\r\n                              </div>\r\n                            ) : null}\r\n                          </FormGroup>\r\n                        </Colxx>\r\n                      </Row>\r\n\r\n                      {this.state.showUsersField && (\r\n                        <Row>\r\n                          <Colxx xxs=\"12\" sm=\"6\">\r\n                            <FormGroup className=\"form-group has-float-label\">\r\n                              <Label>Sent To Users</Label>\r\n                              {/* <Select\r\n                                  closeMenuOnSelect={false}\r\n                                  isMulti\r\n                                  name=\"sent_to_users\"\r\n                                  components={()=>{ Option, this.MultiValue }}\r\n                                  value={this.state.selectedUsers}\r\n                                  defaultValue=\"\"\r\n                                  options={this.state.usersList}\r\n                                  hideSelectedOptions={false}\r\n                                  backspaceRemovesValue={false}\r\n                                  onChange={(selectedOptions) => {\r\n                                    this.setState({\r\n                                      selectedUsers: selectedOptions,\r\n                                    });\r\n                                  }}\r\n                                /> */}\r\n\r\n                              <Select\r\n                                components={{ Input: CustomSelectInput }}\r\n                                className=\"react-select\"\r\n                                classNamePrefix=\"react-select\"\r\n                                isMulti\r\n                                name=\"sent_to_users\"\r\n                                options={this.state.usersList}\r\n                                value={this.state.selectedUsers}\r\n                                onChange={(selectedOptions) => {\r\n                                  this.setState({\r\n                                    selectedUsers: selectedOptions,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {errors.sent_to_users && touched.sent_to_users ? (\r\n                                <div className=\"invalid-feedback d-block\">\r\n                                  {errors.sent_to_users}\r\n                                </div>\r\n                              ) : null}\r\n                            </FormGroup>\r\n                          </Colxx>\r\n                        </Row>\r\n                      )}\r\n\r\n                      <Button color=\"primary\" type=\"submit\">\r\n                        <IntlMessages id=\"button.save\" />\r\n                      </Button>\r\n                    </Form>\r\n                  )}\r\n                </Formik>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(Notifications);\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading} /></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                  getMenuTitle(sub)\r\n                )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  listTag: tagPropType,\n  className: PropTypes.string,\n  listClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string\n};\nvar defaultProps = {\n  tag: 'nav',\n  listTag: 'ol',\n  'aria-label': 'breadcrumb'\n};\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      listClassName = props.listClassName,\n      cssModule = props.cssModule,\n      children = props.children,\n      Tag = props.tag,\n      ListTag = props.listTag,\n      label = props['aria-label'],\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"listClassName\", \"cssModule\", \"children\", \"tag\", \"listTag\", \"aria-label\"]);\n\n  var classes = mapToCssModules(classNames(className), cssModule);\n  var listClasses = mapToCssModules(classNames('breadcrumb', listClassName), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-label\": label\n  }), React.createElement(ListTag, {\n    className: listClasses\n  }, children));\n};\n\nBreadcrumb.propTypes = propTypes;\nBreadcrumb.defaultProps = defaultProps;\nexport default Breadcrumb;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'li'\n};\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      active = props.active,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"active\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, 'breadcrumb-item'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-current\": active ? 'page' : undefined\n  }));\n};\n\nBreadcrumbItem.propTypes = propTypes;\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;"],"sourceRoot":""}